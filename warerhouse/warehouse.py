"""
    Progam: Warehouse management system
     Author: Kenny Rienecker
        Func:
            1-Register items
                -id(autogenerated) (int)
                -title (str)
                -category (str)
                -stock (int)
                -price (float)
"""

# imports 
from menu import print_menu, clear, print_header, print_item
from item import Item
import pickle

#global variables
catalog = []
last_id = 1

#functions
def serialize_catalog():
    writer = open('warehouse.data', 'wb') #open/create a file to write binary'
    pickle.dump(catalog, writer) #cloe the stream , release the file
    print("** Data Serialized!")

def deserialized_catalog():
    global last_id
    try:
        reader = open('warehouse.data', 'rb') #open the file to read bianry
        temp_list = pickle.load(reader)

        for item in temp_list:
            catalog.append(item)

        how_many = len(catalog)
        last_item  = catalog[-1]
        last_id = last_item.id + 1

        print("**Deserialized " +str(how_many) + " items")
    except:
        print("**Error, no data found")


def register_item():
    global last_id
    try:
        print_header("Register Item")
        title = input("Please provide the title: ")
        cat =  input("Please provide category: ")
        stock =  int(input ("Please provide the initial stock: "))
        price =  float(input ("Please provide the price of the item: "))

        item = Item(last_id, title, cat, stock, price)
        last_id = last_id +1
        #add item to the catalog list
        catalog.append(item)

        print("** Item Saved!")
    
    except ValueError:
        print("**Error! Incorrect input fix and try again")

    except:
        print("**Error! Please verify your data entries and try again please!")


def print_catalog():
    print_header("Items on Catalog")

    if( len(catalog) == 0):
        print("** Your catalog is empty \nUse option 1 to create items\n")
    else:
        for item in catalog:
            print_item(item)
        print("-" * 80)

def print_Out_of_Stock():
    print_header("Items out of Stock from Catalog")

    for item in catalog:
        if(item.stock == 0):
            print_item(item)

    print("-" * 80)

def total_stock_value():
    print_header("Total Stock Value")
    total = 0.0
    for item in catalog:
        total = total + (item.price * item.stock)

    print("Total " + str(total))

def delete_item():
    item = choose_item()
    if(item != 0):
        catalog.remove(item)
        print("Item removed")

def update_stock():
    item = choose_item()
    if(item !=0):
        stock = int(input("Provide hte new stock value:"))
        item.stock = stock
        print("Stock Update!!")

            #remove item from list ???
            # show catalog to user
            #ask user to choose and id
            #travel the list
            #find the item with that id
            # delete item from the list

def update_item_price():    
    item = choose_item()
    if(item != 0):
        price = float(input("Provide hte new stock price:"))
        item.price = price
        print("Price Update!!")

def choose_item():
    try:
        print_catalog()
        id = int(input("Please choose the ID to delete: "))
        found = False
        for item in catalog:
            if(item.id == id):
                found = True
                return item

        if(not found):
            print("**Error, invalid ID, verify and try again")
            return 0

    except:
        print("**Error, verify and try again")
        return 0

def print_categories():
    try:
        print_categories()
        found = False
        for category in range (len(catalog)):
            if(item.category == category):
                found = True
            #push category to inventory called categorylist I think

        if(item.category == category.list):
                

#instructions
deserialized_catalog()

opc=''
while(opc != 'x'):
    clear()
    print_menu()

    opc = input('Please select an option: ')

    if(opc =='1'):
        register_item()
        serialize_catalog()
    elif(opc =='2'):
        print_catalog()
    elif(opc =='3'):
        print_Out_of_Stock()
    elif(opc =='4'):
        delete_item()
        serialize_catalog()
    elif(opc =='5'):
        update_stock()
        serialize_catalog()
    elif(opc =='6'):
        update_item_price()
        serialize_catalog()    
    elif(opc =='7'):
        total_stock_value()
    elif(opc =='8'):
        total_stock_value()

    input("Press Enter to Continue")

print("Thank you, goodbye!")